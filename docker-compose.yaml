version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - demo_network

  function-a:
    container_name: function-a
    build:
      context: ./producer
      dockerfile: Dockerfile
    depends_on:
      - rabbitmq
    networks:
      - demo_network
    restart: on-failure
    healthcheck:
      test: ["CMD", "pgrep", "python"]
      interval: 30s
      timeout: 10s
      retries: 5

  function-a-listener:
    container_name: function-a-listener
    build:
      context: ./consumer
      dockerfile: Dockerfile
    depends_on:
      - rabbitmq
    networks:
      - demo_network
    restart: on-failure
    healthcheck:
      test: ["CMD", "pgrep", "python"]
      interval: 30s
      timeout: 10s
      retries: 5

  producer:
    container_name: producer
    build:
      context: ./log-producer
      dockerfile: Dockerfile
    depends_on:
      - rabbitmq
    networks:
      - demo_network
    restart: on-failure
    environment:
      ROUTING_KEYS: "#,kern.*,*.critical,*.*,A critical kernel error,kern.critical"
    healthcheck:
      test: [ "CMD", "pgrep", "python" ]
      interval: 30s
      timeout: 10s
      retries: 5

  consumer:
    container_name: consumer
    build:
      context: ./log-consumer
      dockerfile: Dockerfile
    depends_on:
      - rabbitmq
      - producer
    networks:
      - demo_network
    restart: on-failure
    environment:
      SEVERITY: "info,error"
      TYPE: "Routing"
    healthcheck:
      test: [ "CMD", "pgrep", "python" ]
      interval: 30s
      timeout: 10s
      retries: 5

  consumer-warning:
    container_name: consumer-warning
    build:
      context: ./log-consumer
      dockerfile: Dockerfile
    depends_on:
      - rabbitmq
      - producer
    networks:
      - demo_network
    restart: on-failure
    environment:
      SEVERITY: "warning"
      TYPE: "Routing"
    healthcheck:
      test: [ "CMD", "pgrep", "python" ]
      interval: 30s
      timeout: 10s
      retries: 5

  consumer-topic:
    container_name: consumer-topic
    build:
      context: ./log-consumer
      dockerfile: Dockerfile
    depends_on:
      - rabbitmq
      - producer
    networks:
      - demo_network
    restart: on-failure
    environment:
      TYPE: "Topics"
      BINDING_KEYS: "#"
    healthcheck:
      test: [ "CMD", "pgrep", "python" ]
      interval: 30s
      timeout: 10s
      retries: 5

  consumer-topic-kern:
    container_name: consumer-topic-kern
    build:
      context: ./log-consumer
      dockerfile: Dockerfile
    depends_on:
      - rabbitmq
      - producer
    networks:
      - demo_network
    restart: on-failure
    environment:
      TYPE: "Topics"
      BINDING_KEYS: "kern.*"
    healthcheck:
      test: [ "CMD", "pgrep", "python" ]
      interval: 30s
      timeout: 10s
      retries: 5

  consumer-topic-critical:
    container_name: consumer-topic-critical
    build:
      context: ./log-consumer
      dockerfile: Dockerfile
    depends_on:
      - rabbitmq
      - producer
    networks:
      - demo_network
    restart: on-failure
    environment:
      TYPE: "Topics"
      BINDING_KEYS: "*.critical"
    healthcheck:
      test: [ "CMD", "pgrep", "python" ]
      interval: 30s
      timeout: 10s
      retries: 5

  consumer-topic-kerncritical:
    container_name: consumer-topic-kerncritical
    build:
      context: ./log-consumer
      dockerfile: Dockerfile
    depends_on:
      - rabbitmq
      - producer
    networks:
      - demo_network
    restart: on-failure
    environment:
      TYPE: "Topics"
      BINDING_KEYS: "kern.*,*.critical"
    healthcheck:
      test: [ "CMD", "pgrep", "python" ]
      interval: 30s
      timeout: 10s
      retries: 5

  consumer-topic-error:
    container_name: consumer-topic-error
    build:
      context: ./log-consumer
      dockerfile: Dockerfile
    depends_on:
      - rabbitmq
      - producer
    networks:
      - demo_network
    restart: on-failure
    environment:
      TYPE: "Topics"
      BINDING_KEYS: "anonymous.info"
    healthcheck:
      test: [ "CMD", "pgrep", "python" ]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  demo_network:
    driver: bridge

volumes:
  rabbitmq_data:
